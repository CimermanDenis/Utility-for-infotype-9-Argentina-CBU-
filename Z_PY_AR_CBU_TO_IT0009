REPORT z_py_ar_cbu_to_it0009.

SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME TITLE TEXT-t01.
PARAMETERS:
  p_pernr TYPE pernr_d      OBLIGATORY,
  p_begda TYPE begda        OBLIGATORY,
  p_endda TYPE endda        OBLIGATORY DEFAULT '99991231',
  p_bankl LIKE p0009-bankl  OBLIGATORY, " search help is already wired into it, no need to call F4IF_FIELD_VALUE_REQUEST and use e.g. FM HRCA_SEARCH_BANK_ADDRESS
  p_cbu   TYPE char22       OBLIGATORY,
  p_subty TYPE p0009-subty  DEFAULT '0'.
SELECTION-SCREEN END OF BLOCK b1.


" Central helper to compute + preview BANKL
FORM preview_bankl.
  DATA lv_msg TYPE string.
  CALL METHOD zcl_py_ar_cbu=>preview_bankl
    EXPORTING
      i_subty = p_subty
      i_cbu   = p_cbu
    IMPORTING
      e_bankl = p_bankl
    RECEIVING
      r_msg   = lv_msg.
  " Show non-blocking info in status bar; user can adjust inputs and it will refresh again
  IF lv_msg IS NOT INITIAL.
    MESSAGE lv_msg TYPE 'W'.
  ENDIF.
ENDFORM.


AT SELECTION-SCREEN OUTPUT.
  " show the last values entered
  SET PARAMETER ID 'ZSUB' FIELD p_subty.
  SET PARAMETER ID 'ZCBU' FIELD p_cbu.

  " recompute BANKL
  PERFORM preview_bankl.

  "Make P_BANKL display-only
  LOOP AT SCREEN.
    IF screen-name = 'P_BANKL'.
      screen-input = 0.
      MODIFY SCREEN.
    ENDIF.
  ENDLOOP.


  " F4 search help for SUBTY
AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_subty.
  TYPES: BEGIN OF ty_f4,
           subty TYPE p0009-subty,
           stype TYPE t591s-stext,
         END OF ty_f4.

  DATA: lt_f4     TYPE STANDARD TABLE OF ty_f4,
        ls_f4     TYPE ty_f4,
        lt_fields TYPE STANDARD TABLE OF dfies,
        ls_field  TYPE dfies.

  "Fill the two fixed values (subty 0 and 2 only)
  SELECT subty, stext
    FROM t591s
    INTO TABLE @lt_f4
  WHERE sprsl = @sy-langu
  AND infty = '0009'
  AND subty IN ( '0', '2' ).

  "Describe columns for F4, maybe an overkill but we'll get a nice pop-up
  CLEAR lt_fields.
  ls_field-fieldname = 'SUBTY'. ls_field-reptext = 'Subtype'.     ls_field-intlen = 8.  ls_field-outputlen = 4.   APPEND ls_field TO lt_fields.
  ls_field-fieldname = 'STEXT'. ls_field-reptext = 'Description'. ls_field-intlen = 80. ls_field-outputlen = 40.  APPEND ls_field TO lt_fields.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      retfield    = 'SUBTY'
      dynpprog    = sy-repid
      dynpnr      = sy-dynnr
      dynprofield = 'P_SUBTY'
      value_org   = 'S'
    TABLES
      value_tab   = lt_f4
      field_tab   = lt_fields
    EXCEPTIONS
      OTHERS      = 1.


INITIALIZATION.
  GET PARAMETER ID 'ZSUB' FIELD p_subty.
  GET PARAMETER ID 'ZCBU' FIELD p_cbu.

START-OF-SELECTION.
  DATA(ls_params) = VALUE zcl_py_ar_cbu=>ty_params(
                      pernr = p_pernr
                      begda = p_begda
                      endda = p_endda
                      bankl = p_bankl
                      cbu   = p_cbu
                      subty = p_subty ).

  DATA(ls_result) = zcl_py_ar_cbu=>run( ls_params ).

  IF ls_result-success = abap_true.
    MESSAGE ls_result-message TYPE 'S'.
  ELSE.
    MESSAGE ls_result-message TYPE 'E'.
  ENDIF.
